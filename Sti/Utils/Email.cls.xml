<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Utils.Email">
<Description>
Working with email</Description>
<TimeCreated>63098,81612.618657</TimeCreated>

<Method name="GetMailForOrderCurator">
<ClassMethod>1</ClassMethod>
<FormalSpec>order:Sti.Data.Order</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set mail = ..GetEmailPattern("orderCurator")
	set mail.message = $REPLACE(mail.message, "%ApproveUrl", "http://"_$get(^Settings("Sti","WebApp"))_"/sti/index.csp#/orderaccept/"_order.%Id())
	return mail
]]></Implementation>
</Method>

<Method name="GetMailForOrderIntern">
<ClassMethod>1</ClassMethod>
<FormalSpec>order:Sti.Data.Order</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	return ..GetEmailPattern("orderIntern")
]]></Implementation>
</Method>

<Method name="GetMailForConfirmationSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>mItem:Sti.Data.MailingItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set mail = ..GetEmailPattern("confirmsubscription")
	set mail.message = $REPLACE(mail.message, "%ActivationUrl", "http://"_$get(^Settings("Sti","WebApp"))_"/sti/index.csp#/mailing/subscription/confirmation/"_$system.Encryption.Base64Encode(mItem.AccessCode))
	quit mail
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "orderCurator"){
		set proxy.subject = ##class(Sti.Utils.Msg).GetMsg("mail_Subject_Order-Curator")
		set proxy.message = ##class(Sti.Utils.Msg).GetMsg("mail_Message_Order-Curator")
	}
	elseif (type = "orderIntern"){
		set proxy.subject = ##class(Sti.Utils.Msg).GetMsg("mail_Subject_Order-Intern")
		set proxy.message = ##class(Sti.Utils.Msg).GetMsg("mail_Message_Order-Intern")
	}
	elseif (type = "confirmsubscription"){
		set proxy.subject = ##class(Sti.Utils.Msg).GetMsg("mail_Subject_Confirmation-Subscription")
		set proxy.message = ##class(Sti.Utils.Msg).GetMsg("mail_Message_Confirmation-Subscription")
	}
	quit proxy
]]></Implementation>
</Method>

<Method name="SetMailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,subject:%String,message:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	if (type = "orderCurator"){
		do ##class(Sti.Utils.Msg).SetMsg("mail_Subject_Order-Curator", subject)
		do ##class(Sti.Utils.Msg).SetMsg("mail_Message_Order-Curator", message)
	}
	elseif (type = "orderIntern"){
		do ##class(Sti.Utils.Msg).SetMsg("mail_Subject_Order-Intern", subject)
		do ##class(Sti.Utils.Msg).SetMsg("mail_Message_Order-Intern", message)
	}
	elseif (type = "confirmsubscription"){
		do ##class(Sti.Utils.Msg).SetMsg("mail_Subject_Confirmation-Subscription", subject)
		do ##class(Sti.Utils.Msg).SetMsg("mail_Message_Confirmation-Subscription", message)
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Send">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,subject:%String,msg:%String,recipientName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try
	{
		set mail=##class(%Net.MailMessage).%New()
    	set mail.From = "ls@intersystems.ru"
    	set mail.Subject = subject
    	set mail.Charset = "utf-8"
    	set mail.IsHTML = 1
    	set mail.ContentType = "text/html"
    	do mail.TextData.Write(msg)
    	
	    do mail.To.Insert(email)
	    
		set auth=##class(%Net.Authenticator).%New()
		set auth.UserName = $GET(^Settings("Sti", "Email", "UserName"))
		set auth.Password = $GET(^Settings("Sti", "Email", "Password"))
  		
  		set smtp = ##class(%Net.SMTP).%New()
    	set smtp.smtpserver = $GET(^Settings("Sti", "Email", "SmtpServer"))
    	set smtp.port = $GET(^Settings("Sti", "Email", "SmtpPort"))
  		set smtp.authenticator = auth
  	
    	$$$THROWONERROR(st, smtp.Send(mail))
	}
	catch (ex){
		set st = ex.AsStatus()
  	}
  	
	quit st
]]></Implementation>
</Method>
</Class>
</Export>
