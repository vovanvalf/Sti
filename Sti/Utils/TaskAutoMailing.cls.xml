<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Utils.TaskAutoMailing">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63787,69971.377981</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This method is responsible for executing the task.<br>
At the scheduled time, the Task Manager creates an instance of this object,
sets any property values using the stored "settings" for the task, and then
invokes this method to execute the task.<br>
In order to execute a real task, override this method in a subclass.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..Main()
]]></Implementation>
</Method>

<Method name="Main">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..StudentsAutoMailing()
    
    
    do ..CuratorAutoMailing()
    
    
    //do ..MailingGroupsAutoMailing()
   
   
    job ##class(Sti.Data.MailingJournal).StartSending()
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="StudentsAutoMailing">
<Description>
Send notification to all students in the training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set diffDays = ##class(Sti.Data.Settings).GetMailingStudentsDays()
            
        &sql(DECLARE InCur CURSOR FOR 
                SELECT ID
                FROM Sti_Data.Internship
                WHERE IsInUse = 1 AND IsStudentsAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateBegin) = :diffDays)  
            
        &sql(OPEN InCur)
        for  
        {   
            &sql(FETCH InCur INTO :inId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Sti.Utils.Log).Create("Stc.Utils.TaskAutoMailing StudentsAutoMailing()", "Start; inId="_inId)
            
            set in = ##class(Sti.Data.Internship).%OpenId(inId)
            set mail = ##class(Sti.Utils.Email).GetMailForInternshipStudents(in)
            
           // set contacts = ##class(Sti.Data.Internship).GetStudentsContacts(inId)
            
            do ##class(Sti.Data.MailingJournal).CreateAll(contacts, mail.subject, mail.message, ##class(Msg).GetMsg("StudentsRemainder"))
            
            if (contacts.Count() > 0) {
                set in.IsStudentsAutoMailing = $$$NO
                do in.%Save()
            }                       
        }
            
        &sql(CLOSE InCur)       
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Sti.Utils.Log).Create("Sti.Utils.TaskAutoMailing StudentsAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="CuratorAutoMailing">
<Description>
Send notification to training curator</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set grNumber = ##class(Sti.Data.MailingJournal).GetValidGroupNumber()
        set diffDays = ##class(Sti.Data.Settings).GetMailingCuratorDays()
            
        &sql(DECLARE Tr3Cur CURSOR FOR 
                SELECT ID
                FROM Sti_Data.Internship
                WHERE IsInUse = 1 AND IsCuratorAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateBegin) = :diffDays)   
            
        &sql(OPEN Tr3Cur)
        for  
        {   
            &sql(FETCH Tr3Cur INTO :inId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Sti.Utils.Log).Create("Sti.Utils.TaskAutoMailing CuratorAutoMailing()", "Start; inId="_inId)
            
            set tr = ##class(Sti.Data.Internship).%OpenId(inId)
            
            set mail = ##class(Sti.Utils.Email).GetMailForTrainingCurator(tr)
            
            do ##class(Sti.Data.MailingJournal).Create(tr.Curator.Email, tr.Curator.LastName.Value, mail.subject, mail.message, ##class(Msg).GetMsg("CuratorAccessToStudentList"), grNumber)
            
            set tr.IsCuratorAutoMailing = 0
            do tr.%Save()                       
        }
            
        &sql(CLOSE Tr3Cur)
    
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Sti.Utils.Log).Create("Sti.Utils.TaskAutoMailing CuratorAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Send 
ClassMethod MailingGroupsAutoMailing() As %Status
{
    set st = $$$OK
    
    try{
        &sql(DECLARE MTGCur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.MailingTrainingGroup
                WHERE IsAutoMailing = 1 AND Training->IsCompleted = 0)  
            
        &sql(OPEN MTGCur)
        for  
        {   
            &sql(FETCH MTGCur INTO :mtgId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing MailingGroupsAutoMailing()", "Start; mtgID="_mtgId)
            
            set mtg = ##class(Stc.Data.MailingTrainingGroup).%OpenId(mtgId)
            
            set mail = ##class(Stc.Data.MailingGroup).GetMail(mtg.MGroup.%Id(), mtg.Training.%Id())
            set contacts = ##class(Stc.Data.MailingGroup).GetMailingItemsContacts(mtg.MGroup.%Id())
            set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
    
            for i=1:1:contacts.Count(){
                set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(contacts.GetAt(i).id)
                if '$ISOBJECT(mItem) continue
                    
                set msg = $REPLACE(mail.message, "%AccessCode", $system.Encryption.Base64Encode(mItem.AccessCode))
                do ##class(Stc.Data.MailingJournal).Create(contacts.GetAt(i).email, contacts.GetAt(i).name, mail.subject, msg, mItem.MGroup.Name, grNumber)  
            }
                    
            if (contacts.Count() > 0) {
                set mtg.IsAutoMailing = $$$NO
                set mtg.MailingIsCompleted = $$$YES
                do mtg.%Save()
            }                           
        }
        &sql(CLOSE MTGCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing MailingGroupsAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
