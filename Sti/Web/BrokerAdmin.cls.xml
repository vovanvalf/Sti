<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.BrokerAdmin">
<Description>
Private request processor for administrator</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63098,81405.67207</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

<!-- Check access, authorization call, if needed -->
<Route Method="GET" Url="/checkAdmin/:isLogin" Call="Sti.Web.JsonAdmin:CheckAdmin"/>

<!-- City get -->
<Route Method="GET" Url="/json/city/:startsWith" Call="Sti.Web.JsonAdmin:GetCities"/>

<!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- Получить всех стажеров -->
<Route Url="/intern" Method="GET" Call="Sti.Web.JsonAdmin:GetInterns"/> 

<!-- Получить стажера по ИД -->
<Route Url="/intern/:id" Method="GET" Call="Sti.Web.JsonAdmin:GetIntern"/> 

<!-- Сохранить / создать стажера -->
<Route Url="/intern" Method="POST" Call="Sti.Web.JsonAdmin:SaveIntern"/> 

<!-- Удалить стажера -->
<Route Url="/intern/:id" Method="DELETE" Call="Sti.Web.JsonAdmin:DeleteIntern"/> 

<!-- GET ALL [GRID], Intern -->
<Route Method="POST" Url="/intern/grid" Call="Sti.Web.JsonAdmin:GetInternsForGrid"/>


<!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- Все университеты -->
<Route Url="/university" Method="GET" Call="Sti.Web.JsonAdmin:GetUniversitys"/> 

<!-- Все стажеры университета -->
<Route Url="/university/:id/intern" Method="GET" Call="Sti.Web.JsonAdmin:GetUniversityInterns"/> 

<!-- Получить университет по ИД -->
<Route Url="/university/:id" Method="GET" Call="Sti.Web.JsonAdmin:GetUniversity"/> 

<!-- Сохранить / создать университет -->
<Route Url="/university" Method="POST" Call="Sti.Web.JsonAdmin:SaveUniversity"/> 

<!-- Удалить университет -->
<Route Url="/university/:id" Method="DELETE" Call="Sti.Web.JsonAdmin:DeleteUniversity"/> 

<!-- GET ALL [GRID], Intern -->
<Route Method="POST" Url="/university/grid" Call="Sti.Web.JsonAdmin:GetUniversitiesForGrid"/>



<!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- Все компании -->
<Route Url="/company" Method="GET" Call="Sti.Web.JsonAdmin:GetCompanies"/> 

<!-- Все стажеровки компании -->
<Route Url="/company/:id/internship" Method="GET" Call="Sti.Web.JsonAdmin:GetCompanyInternship"/> 

<!-- Получить компанию по ИД -->
<Route Url="/company/:id" Method="GET" Call="Sti.Web.JsonAdmin:GetCompany"/> 

<!-- Сохранить / создать компанию -->
<Route Url="/company" Method="POST" Call="Sti.Web.JsonAdmin:SaveCompany"/> 

<!-- Удалить компанию -->
<Route Url="/company/:id" Method="DELETE" Call="Sti.Web.JsonAdmin:DeleteCompany"/> 

<!-- GET ALL [GRID], Companies -->
<Route Method="POST" Url="/company/grid" Call="Sti.Web.JsonAdmin:GetCompaniesForGrid"/>



<!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- Получить все стажировки -->
<Route Url="/internship" Method="GET" Call="Sti.Web.JsonAdmin:GetInternships"/> 

<!-- Получить стажировку по ИД -->
<Route Url="/internship/:id" Method="GET" Call="Sti.Web.JsonAdmin:GetInternship"/> 

<!-- Сохранить / создать стажировку -->
<Route Url="/internship" Method="POST" Call="Sti.Web.JsonAdmin:SaveInternship"/> 

<!-- Удалить стажировку -->
<Route Url="/internship/:id" Method="DELETE" Call="Sti.Web.JsonAdmin:DeleteInternship"/> 

<!-- GET ALL [GRID], Internship -->
<Route Method="POST" Url="/internship/grid" Call="Sti.Web.JsonAdmin:GetInternshipsForGrid"/>


<!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- Получить все оценки english -->
<Route Url="/eng" Method="GET" Call="Sti.Web.JsonAdmin:GetEngMarks"/> 

<!-- Получить все оценки tet -->
<Route Url="/tet" Method="GET" Call="Sti.Web.JsonAdmin:GetTetMarks"/>

<!-- Получить все оценки pet -->
<Route Url="/pet" Method="GET" Call="Sti.Web.JsonAdmin:GetPetMarks"/>


</Routes>
]]></Data>
</XData>

<Method name="Http404">
<Description>
Issue an '404' error ( user can override)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<h3 style="color:red">Страница не найдена!!!</h3>>
    Set %response.Status="404 Not Found"
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "en":"en", :"ru")
	do ##class(%MessageDictionary).SetSessionLanguage(lang)
	set %session.Language = lang
	
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
