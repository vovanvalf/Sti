<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<Method name="CheckAdmin">
<Description>
Check access, authorization call, if needed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (isLogin = 1){
		if (##class(Sti.Data.Internship).CheckDeletePrivilege() = $$$OK){
			w "{""privileges"":""all""}"
		}
		else{
			w "{""privileges"":""read""}"
		}
		q $$$OK
	}

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

	
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEngMarks">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE EngCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.ENGMark)	
		
		&sql(OPEN EngCur)
		for  
		{	
			&sql(FETCH EngCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.ENGMark).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE EngCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetPetMarks">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE PetCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.PETMark)	
		
		&sql(OPEN PetCur)
		for  
		{	
			&sql(FETCH PetCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.PETMark).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE PetCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCities">
<Description>
Method="GET" Url="/json/city/:startsWith"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $L(word) < 2 quit $$$OK
	
	set proxyItems = ##class(%ListOfObjects).%New()	
	set lang = $$$SessionLanguage
	set word = word_"%"
	
	&sql(DECLARE RegionCurr CURSOR FOR 
		 	 SELECT TOP 500 reg.ID As id, ltV.Value As name, reg.ParentRegion->Name->Value as parentName, reg.ParentRegion->ParentRegion->Name->Value
		 	 FROM Sti_Data_Localization.LTextValue as ltV
		 	 INNER JOIN 
		 	 Sti_Data.Region as reg ON reg.Name = ltV.LText
			 WHERE reg.HLevel = 2 AND ltV.Lang = :lang AND ltV.Value LIKE :word
			 ORDER BY name, parentName)	
		
	&sql(OPEN RegionCurr)
	for  
	{	
		&sql(FETCH RegionCurr INTO :id, :name, :parent, :greatParent) 
		quit:(SQLCODE '= 0)
		set proxyItem = ##class(%ZEN.proxyObject).%New()
		set proxyItem.id = id
		set proxyItem.name = name
		set proxyItem.parentName = parent
		set proxyItem.greatParentName = greatParent
		do proxyItems.Insert(proxyItem)
	}
		
	&sql(CLOSE RegionCurr)
	
	set proxyResult = ##class(%ZEN.proxyObject).%New()
	set proxyResult.children = proxyItems
	do proxyResult.%ToJSON()
	    
	q $$$OK
]]></Implementation>
</Method>

<Method name="GetIntern">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажёра по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveIntern">
<Description>
Создать / сохранить стажера</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		// Преобразовали входную строку JSON в объект proxyObject
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	// Открываем студента по ИД
      	set intern = ##class(Sti.Data.Intern).%OpenId(data.id,,.st)
      	
      	// Открыть не удалось - создаем
      	if $$$ISERR(st) set intern = ##class(Sti.Data.Intern).%New()
        
      	set intern.LastName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.lastName, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue") 
      	set intern.FirstName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.firstName, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue")
      	set intern.MiddleName =##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.middleName, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue")
      	set intern.Email = $ZCONVERT(data.email, "I", "UTF8")
      	set intern.Phone = $ZCONVERT(data.phone, "I", "UTF8")
      	set intern.Skype = $ZCONVERT(data.skype, "I", "UTF8")
      	set intern.Resume = $ZCONVERT(data.resume, "I", "UTF8")
      	set intern.MailAgree = data.agree = $$$YES
      	set intern.CacheScience = $ZCONVERT(data.cache, "I", "UTF8")
      	set intern.EnsembleScience = $ZCONVERT(data.ensemble, "I", "UTF8")
      	set intern.DeepSeeScience = $ZCONVERT(data.deepsee, "I", "UTF8")
      	set intern.TET = $ZCONVERT(data.tet, "I", "UTF8")
      	set intern.BirthDay=$ZDATEH(data.birthDate, 15)
    	
	set intern.petMark = ##class(Sti.Data.PETMark).%OpenId(data.pet.id,,.st)
	if $$$ISERR(st) set pet = ##class(Sti.Data.PETMark).%New()
    set pet = ##class(Sti.Data.PETMark).%New()
	set pet = ##class(Sti.Data.PETMark).%OpenId(data.pet.id,3,.Status)
	set intern.petMark=pet
	
	set intern.engMark = ##class(Sti.Data.ENGMark).%OpenId(data.eng.id,,.st)
	if $$$ISERR(st) set eng = ##class(Sti.Data.ENGMark).%New()
    set eng = ##class(Sti.Data.ENGMark).%New()
	set eng = ##class(Sti.Data.ENGMark).%OpenId(data.eng.id,3,.Status)
	set intern.engMark=eng
		     	
      	set intern.City = ##class(Sti.Data.Region).%OpenId(data.city.id,,.st)
		if $$$ISERR(st) set city = ##class(Sti.Data.Region).%New()
		set city = ##class(Sti.Data.Region).%OpenId(data.city.id,3,.Status)
		set intern.City=city
		
      	set intern.Internship=  ##class(Sti.Data.Internship).%OpenId(data.internship.id)
        set intern.University = ##class(Sti.Data.University).%OpenId(data.university.id)
		
		$$$THROWONERROR(st, intern.%Save())
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="DeleteIntern">
<Description>
Удалить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Intern).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInterns">
<Description>
Все стажеры</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE IntCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Intern)	
		
		&sql(OPEN IntCur)
		for  
		{	
			&sql(FETCH IntCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE IntCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternsForGrid">
<Description>
Get all interns for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitys">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Все университеты</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE UnCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data."University")	
		
		&sql(OPEN UnCur)
		for  
		{	
			&sql(FETCH UnCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE UnCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteUniversity">
<Description>
Удалить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.University).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetUniversityInterns">
<Description>
Все стажеры университета</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>unId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		// Открываем универ, конвертируем в proxy(полностью) и возвращаем стажеров
		set proxy.children = ##class(Sti.Data.University).%OpenId(unId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversity">
<Description>
Получить универ по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitiesForGrid">
<Description>
Get all interns for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.University", "Sti.Data.University", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveUniversity">
<Description>
Создать / сохранить универ</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set university = ##class(Sti.Data.University).%OpenId(data.id,,.st)
      	
      	if $$$ISERR(st) set university = ##class(Sti.Data.University).%New()
		set university.FullName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.fullName, "I", "UTF8"))
		set university.ShortName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.shortName, "I", "UTF8"))
		set university.Address = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.address, "I", "UTF8"))
		set university.Web = $ZCONVERT(data.web, "I", "UTF8")
	
		set university.Curator = ##class(Sti.Data.Employee).%OpenId(data.curator.id,,.st)
		if $$$ISERR(st) set curator = ##class(Sti.Data.Employee).%New()
		set curator = ##class(Sti.Data.Employee).%New()
		set curator.LastName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.lastName, "I", "UTF8"))
		set curator.FirstName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.firstName, "I", "UTF8"))
		set curator.MiddleName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.middleName, "I", "UTF8"))
		set curator.Email = data.curator.email
		set curator.Phone = data.curator.phone
		
		$$$THROWONERROR(st,curator.%Save() )
		
		set university.Curator = curator
		
		set university.City = ##class(Sti.Data.Region).%OpenId(data.city.id,,.st)
		if $$$ISERR(st) set city = ##class(Sti.Data.Region).%New()
		set city = ##class(Sti.Data.Region).%OpenId(data.city.id,3,.Status)
		set university.City=city
	
		$$$THROWONERROR(st, university.%Save() )
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetCompanies">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Все компания</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE CoCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data."Company")	
		
		&sql(OPEN CoCur)
		for  
		{	
			&sql(FETCH CoCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE CoCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Удалить компания по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Company).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetCompanyInternship">
<Description>
Все стажировки компания</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>coId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		// Открываем универ, конвертируем в proxy(полностью) и возвращаем стажеров
		set proxy.children = ##class(Sti.Data.Company).%OpenId(coId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompany">
<Description>
Получить компания по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompaniesForGrid">
<Description>
Get all company for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Company", "Sti.Data.Company", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveCompany">
<Description>
Создать / сохранить компания</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set company = ##class(Sti.Data.Company).%OpenId(data.id,,.st)
      	     	
      	if $$$ISERR(st) set company = ##class(Sti.Data.Company).%New()
      	set company.FullName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.fullName, "I", "UTF8"))
		set company.ShortName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.shortName, "I", "UTF8"))
		set company.LegalAddress = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.legalAddress, "I", "UTF8"))
		set company.MailAddress = data.mailAddress
		set company.WebSite=data.webSite
		
		set company.Contact = ##class(Sti.Data.Employee).%OpenId(data.curator.id,,.st)
		if $$$ISERR(st) set curator = ##class(Sti.Data.Employee).%New()
		set curator = ##class(Sti.Data.Employee).%New()
		set curator.LastName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.contact.lastName, "I", "UTF8"))
		set curator.FirstName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.contact.firstName, "I", "UTF8"))
		set curator.MiddleName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.contact.middleName, "I", "UTF8"))
		set curator.Email = data.contact.email
		set curator.Phone = data.contact.phone
		
		$$$THROWONERROR(st,curator.%Save() )
		
		set company.Contact = curator
		
	
		$$$THROWONERROR(st, company.%Save())
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetInternship">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажировка по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Internship).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveInternship">
<Description>
Создать / сохранить стажировка</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		// Преобразовали входную строку JSON в объект proxyObject
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	// Открываем студента по ИД
      	set internship = ##class(Sti.Data.Internship).%OpenId(data.id,,.st)
      	
      	// Открыть не удалось - создаем
      	if $$$ISERR(st) set internship = ##class(Sti.Data.Internship).%New()
        
        
        set internship.Name = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.name, "I", "UTF8"))
		set internship.DateBegin=$ZDATEH(data.dateBegin, 15)
		set internship.DateEnd=$ZDATEH(data.dateEnd, 15)
		set internship.MaxPeople=data.maxPeople
		set internship.Street= ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.street, "I", "UTF8"))
		set internship.Room=data.room
		set internship.IsInUse=data.isInUse=$$$YES
		
		set internship.Curator = ##class(Sti.Data.Employee).%OpenId(data.curator.id,,.st)
		if $$$ISERR(st) set curator = ##class(Sti.Data.Employee).%New()
		set curator = ##class(Sti.Data.Employee).%New()
		set curator.LastName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.lastName, "I", "UTF8"))
		set curator.FirstName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.firstName, "I", "UTF8"))
		set curator.MiddleName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.curator.middleName, "I", "UTF8"))
		set curator.Email = data.curator.email
		set curator.Phone = data.curator.phone
		
		$$$THROWONERROR(st,curator.%Save() )
		set internship.Curator = curator
		 	
		set internship.City = ##class(Sti.Data.Region).%OpenId(data.city.id,,.st)
		if $$$ISERR(st) set city = ##class(Sti.Data.Region).%New()
		set city = ##class(Sti.Data.Region).%OpenId(data.city.id,3,.Status)
		set internship.City=city
				
		set internship.Company = ##class(Sti.Data.Company).%OpenId(data.company.id)
		
		$$$THROWONERROR(st, internship.%Save())
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="DeleteInternship">
<Description>
Удалить стажировка по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Internship).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInternships">
<Description>
Все стажировка</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE IntsCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Internship)	
		
		&sql(OPEN IntsCur)
		for  
		{	
			&sql(FETCH IntsCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Internship).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE IntsCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternshipsForGrid">
<Description>
Get all internship for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Internship", "Sti.Data.Internship", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>
</Class>
</Export>
