<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<Method name="GetIntern">
<Description>
Получить стажёра по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject("CBC20F73-49FC-4325-82AE-FEA3AE61DC20","7B2BEAD7-4C69-4924-93FE-9C8C1B235356").%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveIntern">
<Description>
Создать / сохранить стажера</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		// Преобразовали входную строку JSON в объект proxyObject
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	// Открываем студента по ИД
      	set intern = ##class(Sti.Data.Intern).%OpenId(data.id,,.st)
      	
      	// Открыть не удалось - создаем
      	if $$$ISERR(st) set intern = ##class(Sti.Data.Intern).%New()
     
      	set intern.LastName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.lastname, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue") 
      	set intern.FirstName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.firstname, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue")
      	set intern.MiddleName =##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.middlename, "I", "UTF8"), "Sti.Data.Localization.Translation;PersonLTextValue")
      	set intern.Email = $ZCONVERT(data.email, "I", "UTF8")
      	set intern.Phone = $ZCONVERT(data.phone, "I", "UTF8")
      	set intern.Skype = $ZCONVERT(data.skype, "I", "UTF8")
      	set intern.Resume = $ZCONVERT(data.resume, "I", "UTF8")
      	set intern.MailAgree = $ZCONVERT(data.agree, "I", "UTF8")
      	set intern.CacheScience = $ZCONVERT(data.cache, "I", "UTF8")
      	set intern.EnsembleScience = $ZCONVERT(data.ensemble, "I", "UTF8")
      	set intern.DeepSeeScience = $ZCONVERT(data.deepsee, "I", "UTF8")
      	set intern.TET = $ZCONVERT(data.tet, "I", "UTF8")
    
    
    /*ЭТО ВРЕМЕННАЯ ЗАМЕНА ДЛЯ ПРОВЕРКИ РАБОТОСПОСОБНОСТИ НУЖНО БУДЕТ СТАВИТЬ ЗНАЧЕНИЯ ИЗ ТАБЛИЦЫ КЛИЕНТА!*/  	
	set PET = ##class(Sti.Data.PETScience).%New()
	set PET = ##class(Sti.Data.PETScience).%OpenId("1",3,.Status)
	set intern.Pet=PET
	
	set ENG = ##class(Sti.Data.EngScience).%New()
	set ENG = ##class(Sti.Data.EngScience).%OpenId("1",3,.Status)
	set intern.engScience=ENG
	
	set city = ##class(Sti.Data.Region).%New()
	set city = ##class(Sti.Data.Region).%OpenId("000437E3-2814-46EF-814D-190C63E54B6F",3,.Status)
	set intern.City=city
    /*------------------------------------------------------------------------------------------*/  	
      	
      	
      	
        set intern.University = ##class(Sti.Data.University).%OpenId(data.university.id)
		
		$$$THROWONERROR(st, intern.%Save())
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="DeleteIntern">
<Description>
Удалить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Intern).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInterns">
<Description>
Все стажеры</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE IntCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Intern)	
		
		&sql(OPEN IntCur)
		for  
		{	
			&sql(FETCH IntCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject("CBC20F73-49FC-4325-82AE-FEA3AE61DC20","7B2BEAD7-4C69-4924-93FE-9C8C1B235356"))
		}
		
		&sql(CLOSE IntCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternsForGrid">
<Description>
Get all interns for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitys">
<Description>
Все университеты</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE UnCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data."University")	
		
		&sql(OPEN UnCur)
		for  
		{	
			&sql(FETCH UnCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE UnCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteUniversity">
<Description>
Удалить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.University).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetUniversityInterns">
<Description>
Все стажеры университета</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>unId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		// Открываем универ, конвертируем в proxy(полностью) и возвращаем стажеров
		set proxy.children = ##class(Sti.Data.University).%OpenId(unId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversity">
<Description>
Получить универ по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitiesForGrid">
<Description>
Get all interns for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.University", "Sti.Data.University", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveUniversity">
<Description>
Создать / сохранить универ</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set university = ##class(Sti.Data.University).%OpenId(data.id,,.st)
      	
      	if $$$ISERR(st) set university = ##class(Sti.Data.University).%New()
		set university.FullName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.fullName, "I", "UTF8"))
		set university.ShortName = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.shortName, "I", "UTF8"))
		set university.Address = ##class(Sti.Data.Localization.LText).Create($ZCONVERT(data.address, "I", "UTF8"))
		set university.Web = $ZCONVERT(data.web, "I", "UTF8")
		w !, $CASE($$$ISERR(university.%Save()), 1: "Ошибка! Универ не создан!",:"Универ создан")
	
		
		
		set university.Curator = ##class(Sti.Data.Employee).%OpenId(data.curator.id,,.st)
		if $$$ISERR(st) set curator = ##class(Sti.Data.Employee).%New()
		set curator.LastName = ##class(Sti.Data.Localization.LText).Create("Петров", "Sti.Data.Localization.Translation;PersonLTextValue")
		set curator.FirstName = ##class(Sti.Data.Localization.LText).Create("Иван", "Sti.Data.Localization.Translation;PersonLTextValue")
		set curator.MiddleName = ##class(Sti.Data.Localization.LText).Create("Петрович", "Sti.Data.Localization.Translation;PersonLTextValue")
		set curator.Email = "petorv@mainuniversity.com"
		set curator.Phone = "000"
		set university.Curator = curator
		
		set university.City = ##class(Sti.Data.Region).%OpenId(data.city.id,,.st)
		if $$$ISERR(st) set city = ##class(Sti.Data.Region).%New()
		set city = ##class(Sti.Data.Region).%OpenId("00077B9A-5B0C-49A0-9132-8C2D0D0112AF",3,.Status)
		set university.City=city
		
		
		/* Сделать сохранение контактов!
		set employees = ##class(%ArrayOfObjects).%New() 
		set employee = ##class(Sti.Data.Employee).%OpenId("1",3,.Status) 
		do employees.SetAt(employee,"BEABA77F-25FE-46B1-AF38-98A21742796B")
		set university.Contacts=employees*/
	
		$$$THROWONERROR(st, university.%Save())
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>
</Class>
</Export>
