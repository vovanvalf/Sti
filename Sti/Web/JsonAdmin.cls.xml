<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<Method name="ChangeCompanyContact">
<Description>
Change contact person of organization
Method="POST" Url="/json/company/contact/change"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st  = $$$OK
	
		
		// Check privilege for Person table
		//$$$THROWONERROR(st, ##class(Sti.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
		
		set company = ##class(Sti.Data.Company).%OpenId(data.id,3, .st)
		if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("openCompany", "| "_st))
			// Если существует такой контакт, то заменяем им. Иначе - создаем и заменяем
			set newContact = ##class(Sti.Data.Employee).GetEmployeeByParameter(data.contact.firstName,data.contact.lastName,data.contact.email)
			if ($ISOBJECT(newContact)){
				set company.Contact = newContact
			}
			$$$THROWONERROR(st, company.%Save())
			
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonBySearchParameters">
<Description>
All students, search by last name and email
Method="GET" Url="/json/person/search/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Вставить когда привяжешь компании || ', ' || Company->ShortName->Value as text
	set word = ..ParseParameter(word)
	set sql = "SELECT ID as id, "_
	"Email as email, "_
	"LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email as text "_
	"FROM Sti_Data.Employee "_
	"WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
	"ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetInternByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastName:%String,firstName:%String,dob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set intern = ##class(Sti.Data.Intern).GetInternByParameter(lastName, firstName, dob)
	if ($ISOBJECT(intern)){
		set response.status = $$$OK
		set response.result = intern.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckAdmin">
<Description>
Проверить права доступа, авторизация</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (isLogin = 1){
		set data = ##class(%ZEN.proxyObject).%New()
		set data.user = $USERNAME
	
		if (($UserName = "UnknownUser") || ##class(Sti.Data.Internship).CheckDeletePrivilege() = $$$OK){
			set data.privileges = "all"
		}
		else{
			set data.privileges = "read"
		}
		
		do data.%ToJSON()
		
		q $$$OK
	}

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

	do %session.Logout()	
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOrder">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   ЗАЯВКИ        //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить заявку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Order).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteOrder">
<Description>
Удалить заявку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Order).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetOrders">
<Description>
Все заявки</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE OrCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Order)	
		
		&sql(OPEN OrCur)
		for  
		{	
			&sql(FETCH OrCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Order).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE OrCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetOrdersForGrid">
<Description>
Получить все заявки для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Order", "Sti.Data.Order", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetIntern">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   СТАЖЁРЫ       //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveIntern">
<Description>
Создать / сохранить стажера</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Intern).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Intern).Save(data, .st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_InternSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteIntern">
<Description>
Удалить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Intern).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInterns">
<Description>
Все стажеры</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE IntCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Intern)	
		
		&sql(OPEN IntCur)
		for  
		{	
			&sql(FETCH IntCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE IntCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternsForGrid">
<Description>
Получить всех стажеров для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      		do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetInternshipStudentsForGrid">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "Internship = '"_..ParseParameter(params.trainingId)_"'"
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereRequired).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeeBySearchParameters">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   CОТРУДНИКИ      //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
All students, search by last name and email
Method="GET" Url="/json/person/search/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Вставить когда привяжешь компании || ', ' || Company->ShortName->Value as text
	set word = ..ParseParameter(word)
	set sql = "SELECT ID as id, "_
	"Email as email, "_
	"LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email as text "_
	"FROM Sti_Data.Employee "_
	"WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
	"ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetEmployee">
<Description>
Получить сотрудника по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Employee).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveEmployee">
<Description>
Создать / сохранить сотрудника</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Employee).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Employee).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_EmployeeSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteEmployee">
<Description>
Удалить сотрудника по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Employee).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetEmployees">
<Description>
Все сотрудники</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE EmpCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Employee)	
		
		&sql(OPEN EmpCur)
		for  
		{	
			&sql(FETCH EmpCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Employee).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE EmpCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeesForGrid">
<Description>
Получить всех сотрудников для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      		do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Employee", "Sti.Data.Employee", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeeByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastName:%String,firstName:%String,email:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set employee = ##class(Sti.Data.Employee).GetEmployeeByParameter(lastName, firstName, email)
	if ($ISOBJECT(employee)){
		set response.status = $$$OK
		set response.result = employee.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteUniversity">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                УНИВЕРСИТЕТЫ        ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Удалить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.University).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetUniversityInterns">
<Description>
Все стажеры университета</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>unId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(Sti.Data.University).%OpenId(unId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversity">
<Description>
Получить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitiesForGrid">
<Description>
Получить все университеты для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.University", "Sti.Data.University", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveUniversity">
<Description>
Создать / сохранить университет</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.University).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.University).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_UniversitySave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversityByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set university = ##class(Sti.Data.University).GetUniversityByParameter(fullName)
	if ($ISOBJECT(university)){
		set response.status = $$$OK
		set response.result = university.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompanies">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   КОМПАНИИ        ////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Все компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE CoCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data."Company")	
		
		&sql(OPEN CoCur)
		for  
		{	
			&sql(FETCH CoCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE CoCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Удалить компанию по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Company).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetCompanyInternship">
<Description>
Все стажировки компании</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>coId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		// Открываем универ, конвертируем в proxy(полностью) и возвращаем стажеров
		set proxy.children = ##class(Sti.Data.Company).%OpenId(coId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompany">
<Description>
Получить компанию по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompaniesForGrid">
<Description>
Получить все компании для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Company", "Sti.Data.Company", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveCompany">
<Description>
Создать / сохранить компанию</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Company).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Company).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_CompanySave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternship">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                  СТАЖИРОВКИ        ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажировку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Internship).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveInternship">
<Description>
Создать / сохранить стажировку</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Internship).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Internship).Save(data, .st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_InternshipSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteInternship">
<Description>
Удалить стажировку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Internship).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInternshipsForGrid">
<Description>
Получить все стажировки для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Internship", "Sti.Data.Internship", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroupsForGrid">
<Description>

==========================================================================================================================
MAILING GROUPS AND ITEMS                                                                          MAILING GROUPS AND ITEMS   
==========================================================================================================================

Get mailing groups for table
Method="POST" Url="/json/mailing/group/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Sti_Data.MailingGroup", "Sti.Data.MailingGroup", params))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="SaveMailingGroup">
<Description>
Save mailing group
Method="POST" Url="/json/mailing/group"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Sti.Data.MailingGroup).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createMailingGroup",:"saveMailingGroup"), "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroups">
<Description>
Get mailing groups 
Method="GET" Url="/json/mailing/group"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, Name as name FROM Sti_Data.MailingGroup ORDER BY name")
]]></Implementation>
</Method>

<Method name="GetMailingGroup">
<Description>
Get mailing group by ID
Method="GET" Url="/json/mailing/group/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Sti.Data.MailingGroup", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMailingGroupContacts">
<Description>
Get mailing group contacts by ID
Method="GET" Url="/json/mailing/group/:id/contact"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set contacts = ##class(Sti.Data.MailingGroup).GetMailingItemsContacts(id)
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = contacts
    do proxy.%ToJSON() 
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingGroup">
<Description>
Delete mailing group by ID
Method="DELETE" Url="/json/mailing/group/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set SQLCODE = ""
        &sql(DELETE FROM Sti_Data.MailingItemApproved WHERE MGroup = :id)
        
        if (SQLCODE '= 0) && (SQLCODE '= 100){
            $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("DeleteMailingApprovedItemsError", " SQLCODE="_SQLCODE))
        }
        
        $$$THROWONERROR(st, ##class(Sti.Data.MailingGroup).Delete(id))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroupItemsForGrid">
<Description>
Get mailing items in the group for table
Method="POST" Url="/json/mailing/group/item/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Sti_Data.MailingItemApproved", "Sti.Data.MailingItemApproved", params, "MGroup = "_..ParseParameter(params.other.groupId)))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="SaveMailingItem">
<Description>
Save mailing item
Method="POST" Url="/json/mailing/group/item"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Sti.Data.MailingItemApprovedSubscriber).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createMailingItem",:"saveMailingItem"), "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingItem">
<Description>
Get mailing item by ID
Method="GET" Url="/json/mailing/group/item/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Sti.Data.MailingItemApproved", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingItem">
<Description>
Delete mailing group by ID
Method="DELETE" Url="/json/mailing/group/item/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ##class(Sti.Data.MailingItemApproved).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetMailingGroupMail">
<Description>
Delete mailing group by ID
Method="GET" Url="/json/mailing/group/:id/mail"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>grId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ##class(Sti.Data.MailingGroup).GetMail(grId).%ToJSON()
]]></Implementation>
</Method>

<Method name="SendMailToMailingGroup">
<Description>
Send mail to Mailing group items
Method="POST" Url="/json/mailing/mail/send"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1)
        
        set data.subject = $ZCVT(data.subject, "I", "UTF8")
        set data.message = $ZCVT(data.message, "I", "UTF8")
        set grNumber = ##class(Sti.Data.MailingJournal).GetValidGroupNumber()
        for i=1:1:data.contacts.Count(){
            set mItem = ##class(Sti.Data.MailingItemApproved).%OpenId(data.contacts.GetAt(i).id)
            if '$ISOBJECT(mItem) continue
                    
            set msg = $REPLACE(data.message, "%UnsubscribeUrl", "http://"_$get(^Settings("Sti","WebApp"))_"/sti/index.csp#/mailing/subscription/"_$system.Encryption.Base64Encode(mItem.AccessCode))
            do ##class(Sti.Data.MailingJournal).Create(data.contacts.GetAt(i).email, $ZCVT(data.contacts.GetAt(i).name, "I", "UTF8"), data.subject, msg, "ГР: "_mItem.MGroup.Name, grNumber)    
        }
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if $$$ISOK(st){
        job ##class(Sti.Data.MailingJournal).StartSending()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingJournalItemsForGrid">
<Description>
Get mail journal
Method="POST" Url="/json/mailing/journal/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set where = ""
        if params.other.groupNumber > 0 {
            set where = "GroupNumber = '"_params.other.groupNumber_"'"
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Sti_Data.MailingJournal", "Sti.Data.MailingJournal", params, where))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetMailingJournalPartsForGrid">
<Description>
Get mail journal
Method="POST" Url="/json/mailing/journal/parts/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set proxyResult = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children.items = ##class(%ListOfObjects).%New()
        
        set rowCount = 0
        &sql(DECLARE MJCur3 CURSOR FOR 
             SELECT mj.GroupNumber,
                    mj.CreatedTS, 
                    mj.Type, 
                    mj.Subject, 
                    mj.Message, 
                    COUNT(mj.ID) As RecipientCount, 
                    (SELECT COUNT(mj2.ID) FROM Sti_Data.MailingJournal mj2 WHERE mj.GroupNumber = mj2.GroupNumber AND IsSended = 1) As SendedCount
             FROM Sti_Data.MailingJournal as mj
             WHERE GroupNumber > 0
             GROUP BY GroupNumber
             ORDER BY GroupNumber DESC) 
        
        &sql(OPEN MJCur3)
        for  
        {   
            &sql(FETCH MJCur3 INTO :grNumber, :createdTS, :type, :subj, :msg, :recCount, :sendCount) 
            quit:(SQLCODE '= 0)
            set rowCount = rowCount + 1
            
            if (rowCount > params.last) quit
            
            if (rowCount >= params.first){
                set proxy = ##class(%ZEN.proxyObject).%New()
                set proxy.id = grNumber
                set proxy.groupNumber = grNumber
                set proxy.createdTS = createdTS
                set proxy.type = type
                set proxy.subject = subj
                set proxy.message = msg
                set proxy.recipientsCount = recCount
                set proxy.sendedCount = sendCount
                do proxyResult.children.items.Insert(proxy)
            }   
        }
        
        &sql(CLOSE MJCur3)
        
        
        &sql(SELECT COUNT(DISTINCT GroupNumber) INTO :rowCount FROM Sti_Data.MailingJournal WHERE GroupNumber > 0) 
            
        set proxyResult.children.itemsTotal = rowCount
        do proxyResult.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="ChangeMailingStatus">
<Description>
Change mailing status (on|off)
Method="POST" Url="/json/mailing/status/:status"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if ($ZCVT(status, "L") = "off"){
        set ^Settings("Sti","Mail","Status") = "Off"
    }
    else{
        set ^Settings("Sti","Mail","Status") = "On"
        job ##class(Sti.Data.MailingJournal).StartSending()
    }
    
    do ..GetMailingStatus()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMailingStatus">
<Description>
Get current mailing status
Method="GET" Url="/json/mailing/status"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.status = $get(^Settings("Sti","Mail","Status")) 
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingJournalItem">
<Description>
Delete mailing journal item
Method="DELETE" Url="/json/mailing/journal/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(Sti.Data.MailingJournal).%DeleteId(id, 4)
    quit:$$$ISERR(st) ##class(Sti.Utils.Msg).GetErrorStatus("deleteMailingJournalItem", "| "_st) 
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingJournalPart">
<Description>
Delete mailing journal item
Method="DELETE" Url="/json/mailing/journal/part/:groupNumber"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>grNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set SQLCODE = ""
    &sql(DELETE FROM Sti_Data.MailingJournal WHERE GroupNumber = :grNumber)
    
    if (SQLCODE '= 0) && (SQLCODE '= 100){
        quit ##class(Sti.Utils.Msg).GetErrorStatus("Bad sql code. ", "| SQLCODE="_SQLCODE)
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>

==========================================================================================================================
OTHER                                                                                                                OTHER
==========================================================================================================================

Get email pattern from ^CacheMsg
Method="GET" Url="/json/mail/pattern/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ##class(Sti.Utils.Email).GetEmailPattern(type).%ToJSON()
]]></Implementation>
</Method>

<Method name="GetLogsForGrid">
<Description>
Get logs
Method="POST" Url="/json/log/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Sti_Utils.Log", "Sti.Utils.Log", params))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>
</Class>
</Export>
