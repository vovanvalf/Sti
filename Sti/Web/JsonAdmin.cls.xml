<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<Method name="ChangeCompanyContact">
<Description>
Change contact person of organization
Method="POST" Url="/json/company/contact/change"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st  = $$$OK
	
		
		// Check privilege for Person table
		//$$$THROWONERROR(st, ##class(Sti.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
		
		set company = ##class(Sti.Data.Company).%OpenId(data.id,3, .st)
		if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("openCompany", "| "_st))
			// Если существует такой контакт, то заменяем им. Иначе - создаем и заменяем
			set newContact = ##class(Sti.Data.Employee).GetEmployeeByParameter(data.contact.firstName,data.contact.lastName,data.contact.email)
			if ($ISOBJECT(newContact)){
				set company.Contact = newContact
			}
			$$$THROWONERROR(st, company.%Save())
			
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonBySearchParameters">
<Description>
All students, search by last name and email
Method="GET" Url="/json/person/search/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Вставить когда привяжешь компании || ', ' || Company->ShortName->Value as text
	set word = ..ParseParameter(word)
	set sql = "SELECT ID as id, "_
	"Email as email, "_
	"LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email as text "_
	"FROM Sti_Data.Employee "_
	"WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
	"ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetInternByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastName:%String,firstName:%String,dob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set intern = ##class(Sti.Data.Intern).GetInternByParameter(lastName, firstName, dob)
	if ($ISOBJECT(intern)){
		set response.status = $$$OK
		set response.result = intern.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckAdmin">
<Description>
Проверить права доступа, авторизация</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (isLogin = 1){
		set data = ##class(%ZEN.proxyObject).%New()
		set data.user = $USERNAME
	
		if (##class(Sti.Data.Internship).CheckDeletePrivilege() = $$$OK){
			set data.privileges = "all"
		}
		else{
			set data.privileges = "read"
		}
		
		do data.%ToJSON()
		
		q $$$OK
	}

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

	do %session.Logout()	
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOrder">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   ЗАЯВКИ        //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить заявку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Order).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteOrder">
<Description>
Удалить заявку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Order).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetOrders">
<Description>
Все заявки</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE OrCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Order)	
		
		&sql(OPEN OrCur)
		for  
		{	
			&sql(FETCH OrCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Order).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE OrCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetOrdersForGrid">
<Description>
Получить все заявки для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Order", "Sti.Data.Order", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetIntern">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   СТАЖЁРЫ       //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveIntern">
<Description>
Создать / сохранить стажера</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Intern).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Intern).Save(data, .st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_InternSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteIntern">
<Description>
Удалить стажера по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Intern).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInterns">
<Description>
Все стажеры</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE IntCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Intern)	
		
		&sql(OPEN IntCur)
		for  
		{	
			&sql(FETCH IntCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Intern).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE IntCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternsForGrid">
<Description>
Получить всех стажеров для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      		do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetInternshipStudentsForGrid">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "Internship = '"_..ParseParameter(params.trainingId)_"'"
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Intern", "Sti.Data.Intern", params, whereRequired).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeeBySearchParameters">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   CОТРУДНИКИ      //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
All students, search by last name and email
Method="GET" Url="/json/person/search/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Вставить когда привяжешь компании || ', ' || Company->ShortName->Value as text
	set word = ..ParseParameter(word)
	set sql = "SELECT ID as id, "_
	"Email as email, "_
	"LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email as text "_
	"FROM Sti_Data.Employee "_
	"WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
	"ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetEmployee">
<Description>
Получить сотрудника по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Employee).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveEmployee">
<Description>
Создать / сохранить сотрудника</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Employee).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Employee).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_EmployeeSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteEmployee">
<Description>
Удалить сотрудника по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Employee).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetEmployees">
<Description>
Все сотрудники</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE EmpCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data.Employee)	
		
		&sql(OPEN EmpCur)
		for  
		{	
			&sql(FETCH EmpCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Employee).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE EmpCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeesForGrid">
<Description>
Получить всех сотрудников для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      		do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Employee", "Sti.Data.Employee", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetEmployeeByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastName:%String,firstName:%String,email:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set employee = ##class(Sti.Data.Employee).GetEmployeeByParameter(lastName, firstName, email)
	if ($ISOBJECT(employee)){
		set response.status = $$$OK
		set response.result = employee.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteUniversity">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                УНИВЕРСИТЕТЫ        ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Удалить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.University).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetUniversityInterns">
<Description>
Все стажеры университета</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>unId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(Sti.Data.University).%OpenId(unId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversity">
<Description>
Получить университет по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.University).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversitiesForGrid">
<Description>
Получить все университеты для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.University", "Sti.Data.University", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveUniversity">
<Description>
Создать / сохранить университет</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.University).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.University).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_UniversitySave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="GetUniversityByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		 
	set university = ##class(Sti.Data.University).GetUniversityByParameter(fullName)
	if ($ISOBJECT(university)){
		set response.status = $$$OK
		set response.result = university.ConvertToProxyObject()
	}
	else{
		set response.status = 0
	}
	 
	do response.%ToJSON()
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompanies">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                   КОМПАНИИ        ////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Все компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfObjects).%New() 
		
		&sql(DECLARE CoCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Sti_Data."Company")	
		
		&sql(OPEN CoCur)
		for  
		{	
			&sql(FETCH CoCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.children.Insert(##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject())
		}
		
		&sql(CLOSE CoCur)
		
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Удалить компанию по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Company).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetCompanyInternship">
<Description>
Все стажировки компании</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>coId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(%ZEN.proxyObject).%New()
		// Открываем универ, конвертируем в proxy(полностью) и возвращаем стажеров
		set proxy.children = ##class(Sti.Data.Company).%OpenId(coId).ConvertToProxyObject(1).Interns
		do proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompany">
<Description>
Получить компанию по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		do ##class(Sti.Data.Company).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompaniesForGrid">
<Description>
Получить все компании для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Company", "Sti.Data.Company", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="SaveCompany">
<Description>
Создать / сохранить компанию</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Company).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Company).Save(data, .st).ConvertToProxyObject(1).%ToJSON()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_CompanySave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	quit st
]]></Implementation>
</Method>

<Method name="GetInternship">
<Description>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////                  СТАЖИРОВКИ        ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Получить стажировку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		do ##class(Sti.Data.Internship).%OpenId(id).ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveInternship">
<Description>
Создать / сохранить стажировку</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st = $$$OK
	
	try{
		TSTART
		
		//$$$THROWONERROR(st, ##class(Sti.Data.Internship).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
      	
      	do ##class(Sti.Data.Internship).Save(data, .st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Sti.Utils.Msg).GetErrorStatus("error_InternshipSave"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteInternship">
<Description>
Удалить стажировку по ИД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Sti.Data.Internship).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetInternshipsForGrid">
<Description>
Получить все стажировки для таблицы[GRID]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
      	
      	set whereCondition = ""
      	
      	do ..GetProxyObjectsForGrid("SELECT ID FROM Sti_Data.Internship", "Sti.Data.Internship", params, whereCondition).%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>
</Class>
</Export>
