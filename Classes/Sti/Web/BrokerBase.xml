<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Sti.Web.BrokerBase">
<Super>%CSP.REST</Super>
<TimeCreated>63289,63449.225817</TimeCreated>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String,pForwarded:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "en":"en", "de":"de", :"ru")
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tCall,tForward,tAccess,tSupportedVerbs,tTarget,tType As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched,tContinue As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Extract the match url from the application name
        If (0=pForwarded) {
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
        } else {
            Set tMatchUrl=pUrl
        }
                
        #; Pre-Dispatch
        Set tContinue=1,tSC=..OnPreDispatch(tMatchUrl,pMethod,.tContinue)
        If $$$ISERR(tSC) Quit
        
        #; It's the users responsibility to return the response in OnPreDispatch() if Continue = 0
        If tContinue=0 Quit
            
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,2)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                Set tType=$List(tMapEntry,1)
                
                #; If we are a simple route
                If tType="R" {
                   
                    #; Support OPTIONS VERB (cannot be overriden)
                    If pMethod="OPTIONS" {
                        
                        Set tMethodMatched=1 
                       
                        Set tSC=..OnHandleOptionsRequest(tMatchUrl)
                        If $$$ISERR(tSC) Quit
                        
                        #; Dispatch CORS
                        Set tSC=..ProcessCorsRequest(pUrl,$list(tMapEntry,5))
                        If $$$ISERR(tSC) Quit
                        
                        Quit
                    }
                    
                    If pMethod'=$List(tMapEntry,3) Continue
                    
                    Set tTarget=$List(tMapEntry,4)
                    
                    #; We have matched a method
                    Set tMethodMatched=1
                    
                    #; Dispatch CORS
                    Set tSC=..ProcessCorsRequest(pUrl,$list(tMapEntry,5))
                    If $$$ISERR(tSC) Quit
                   
                    #; Got a match, marshall the arguments can call directly
                    If tMatcher.GroupCount {
                        For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                        Set tArgs=tI
                    } else {
                        Set tArgs=0
                    }
                    
                    #; Check for optional ClassName prefix
                    Set tClass=$classname()
                    If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                    
                    #; Dispatch
                    Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                       
                } else {
                    
                    #; We are a map, massage the URL and forward the request
                    Set tMatchUrl=$piece(pUrl,tMatcher.Group(1),"2",*),tForward=$ListGet(tMapEntry,3)
                    Set (tResourceMatched,tMethodMatched)=1
                   
                    #; Dispatch with modified URL 
                    Set tSC=$zobjclassmethod(tForward,"DispatchRequest",tMatchUrl,pMethod,1)
                }
                
                If $$$ISERR(tSC) {
                   
                    Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                    
                    #; Reset status (already been reported)
                    Set tSC=$$$OK
                }
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..ReportHttpStatusCode(..#HTTP404NOTFOUND) Quit
                  
        #; Had a match for resource but method not matched
        If tMethodMatched=0 {
            
            Set tSC=..SupportedVerbs(tMatchUrl,.tSupportedVerbs)
            If $$$ISERR(tSC) Quit
            
            Set tSC=..Http405(tSupportedVerbs) Quit
        }
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
